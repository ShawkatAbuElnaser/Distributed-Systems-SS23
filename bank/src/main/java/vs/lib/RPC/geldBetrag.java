package vs.lib.RPC;

/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * 
 * @generated
 */
@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2023-06-13")
public class geldBetrag implements org.apache.thrift.TBase<geldBetrag, geldBetrag._Fields>, java.io.Serializable,
    Cloneable, Comparable<geldBetrag> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
      "geldBetrag");

  private static final org.apache.thrift.protocol.TField GELD_FIELD_DESC = new org.apache.thrift.protocol.TField("geld",
      org.apache.thrift.protocol.TType.DOUBLE, (short) 1);
  private static final org.apache.thrift.protocol.TField TRANSAKTIONSNUMMER_FIELD_DESC = new org.apache.thrift.protocol.TField(
      "transaktionsnummer", org.apache.thrift.protocol.TType.I32, (short) 2);
  private static final org.apache.thrift.protocol.TField VERWENDUNGSZWECK_FIELD_DESC = new org.apache.thrift.protocol.TField(
      "verwendungszweck", org.apache.thrift.protocol.TType.STRING, (short) 3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new geldBetragStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new geldBetragTupleSchemeFactory();

  public double geld; // required
  public int transaktionsnummer; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String verwendungszweck; // optional

  /**
   * The set of fields this struct contains, along with convenience methods for
   * finding and manipulating them.
   */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GELD((short) 1, "geld"),
    TRANSAKTIONSNUMMER((short) 2, "transaktionsnummer"),
    VERWENDUNGSZWECK((short) 3, "verwendungszweck");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch (fieldId) {
        case 1: // GELD
          return GELD;
        case 2: // TRANSAKTIONSNUMMER
          return TRANSAKTIONSNUMMER;
        case 3: // VERWENDUNGSZWECK
          return VERWENDUNGSZWECK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null)
        throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __GELD_ISSET_ID = 0;
  private static final int __TRANSAKTIONSNUMMER_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = { _Fields.TRANSAKTIONSNUMMER, _Fields.VERWENDUNGSZWECK };
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
        _Fields.class);
    tmpMap.put(_Fields.GELD,
        new org.apache.thrift.meta_data.FieldMetaData("geld", org.apache.thrift.TFieldRequirementType.REQUIRED,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TRANSAKTIONSNUMMER,
        new org.apache.thrift.meta_data.FieldMetaData("transaktionsnummer",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32, "int")));
    tmpMap.put(_Fields.VERWENDUNGSZWECK,
        new org.apache.thrift.meta_data.FieldMetaData("verwendungszweck",
            org.apache.thrift.TFieldRequirementType.OPTIONAL,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(geldBetrag.class, metaDataMap);
  }

  public geldBetrag() {
  }

  public geldBetrag(
      double geld) {
    this();
    this.geld = geld;
    setGeldIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public geldBetrag(geldBetrag other) {
    __isset_bitfield = other.__isset_bitfield;
    this.geld = other.geld;
    this.transaktionsnummer = other.transaktionsnummer;
    if (other.isSetVerwendungszweck()) {
      this.verwendungszweck = other.verwendungszweck;
    }
  }

  @Override
  public geldBetrag deepCopy() {
    return new geldBetrag(this);
  }

  @Override
  public void clear() {
    setGeldIsSet(false);
    this.geld = 0.0;
    setTransaktionsnummerIsSet(false);
    this.transaktionsnummer = 0;
    this.verwendungszweck = null;
  }

  public double getGeld() {
    return this.geld;
  }

  public geldBetrag setGeld(double geld) {
    this.geld = geld;
    setGeldIsSet(true);
    return this;
  }

  public void unsetGeld() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GELD_ISSET_ID);
  }

  /**
   * Returns true if field geld is set (has been assigned a value) and false
   * otherwise
   */
  public boolean isSetGeld() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GELD_ISSET_ID);
  }

  public void setGeldIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GELD_ISSET_ID, value);
  }

  public int getTransaktionsnummer() {
    return this.transaktionsnummer;
  }

  public geldBetrag setTransaktionsnummer(int transaktionsnummer) {
    this.transaktionsnummer = transaktionsnummer;
    setTransaktionsnummerIsSet(true);
    return this;
  }

  public void unsetTransaktionsnummer() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TRANSAKTIONSNUMMER_ISSET_ID);
  }

  /**
   * Returns true if field transaktionsnummer is set (has been assigned a value)
   * and false otherwise
   */
  public boolean isSetTransaktionsnummer() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TRANSAKTIONSNUMMER_ISSET_ID);
  }

  public void setTransaktionsnummerIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TRANSAKTIONSNUMMER_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getVerwendungszweck() {
    return this.verwendungszweck;
  }

  public geldBetrag setVerwendungszweck(@org.apache.thrift.annotation.Nullable java.lang.String verwendungszweck) {
    this.verwendungszweck = verwendungszweck;
    return this;
  }

  public void unsetVerwendungszweck() {
    this.verwendungszweck = null;
  }

  /**
   * Returns true if field verwendungszweck is set (has been assigned a value) and
   * false otherwise
   */
  public boolean isSetVerwendungszweck() {
    return this.verwendungszweck != null;
  }

  public void setVerwendungszweckIsSet(boolean value) {
    if (!value) {
      this.verwendungszweck = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
      case GELD:
        if (value == null) {
          unsetGeld();
        } else {
          setGeld((java.lang.Double) value);
        }
        break;

      case TRANSAKTIONSNUMMER:
        if (value == null) {
          unsetTransaktionsnummer();
        } else {
          setTransaktionsnummer((java.lang.Integer) value);
        }
        break;

      case VERWENDUNGSZWECK:
        if (value == null) {
          unsetVerwendungszweck();
        } else {
          setVerwendungszweck((java.lang.String) value);
        }
        break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
      case GELD:
        return getGeld();

      case TRANSAKTIONSNUMMER:
        return getTransaktionsnummer();

      case VERWENDUNGSZWECK:
        return getVerwendungszweck();

    }
    throw new java.lang.IllegalStateException();
  }

  /**
   * Returns true if field corresponding to fieldID is set (has been assigned a
   * value) and false otherwise
   */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
      case GELD:
        return isSetGeld();
      case TRANSAKTIONSNUMMER:
        return isSetTransaktionsnummer();
      case VERWENDUNGSZWECK:
        return isSetVerwendungszweck();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof geldBetrag)
      return this.equals((geldBetrag) that);
    return false;
  }

  public boolean equals(geldBetrag that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_geld = true;
    boolean that_present_geld = true;
    if (this_present_geld || that_present_geld) {
      if (!(this_present_geld && that_present_geld))
        return false;
      if (this.geld != that.geld)
        return false;
    }

    boolean this_present_transaktionsnummer = true && this.isSetTransaktionsnummer();
    boolean that_present_transaktionsnummer = true && that.isSetTransaktionsnummer();
    if (this_present_transaktionsnummer || that_present_transaktionsnummer) {
      if (!(this_present_transaktionsnummer && that_present_transaktionsnummer))
        return false;
      if (this.transaktionsnummer != that.transaktionsnummer)
        return false;
    }

    boolean this_present_verwendungszweck = true && this.isSetVerwendungszweck();
    boolean that_present_verwendungszweck = true && that.isSetVerwendungszweck();
    if (this_present_verwendungszweck || that_present_verwendungszweck) {
      if (!(this_present_verwendungszweck && that_present_verwendungszweck))
        return false;
      if (!this.verwendungszweck.equals(that.verwendungszweck))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(geld);

    hashCode = hashCode * 8191 + ((isSetTransaktionsnummer()) ? 131071 : 524287);
    if (isSetTransaktionsnummer())
      hashCode = hashCode * 8191 + transaktionsnummer;

    hashCode = hashCode * 8191 + ((isSetVerwendungszweck()) ? 131071 : 524287);
    if (isSetVerwendungszweck())
      hashCode = hashCode * 8191 + verwendungszweck.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(geldBetrag other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetGeld(), other.isSetGeld());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGeld()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.geld, other.geld);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTransaktionsnummer(), other.isSetTransaktionsnummer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransaktionsnummer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transaktionsnummer, other.transaktionsnummer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVerwendungszweck(), other.isSetVerwendungszweck());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVerwendungszweck()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.verwendungszweck, other.verwendungszweck);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("geldBetrag(");
    boolean first = true;

    sb.append("geld:");
    sb.append(this.geld);
    first = false;
    if (isSetTransaktionsnummer()) {
      if (!first)
        sb.append(", ");
      sb.append("transaktionsnummer:");
      sb.append(this.transaktionsnummer);
      first = false;
    }
    if (isSetVerwendungszweck()) {
      if (!first)
        sb.append(", ");
      sb.append("verwendungszweck:");
      if (this.verwendungszweck == null) {
        sb.append("null");
      } else {
        sb.append(this.verwendungszweck);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'geld' because it's a primitive and you chose the
    // non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is
      // wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class geldBetragStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public geldBetragStandardScheme getScheme() {
      return new geldBetragStandardScheme();
    }
  }

  private static class geldBetragStandardScheme extends org.apache.thrift.scheme.StandardScheme<geldBetrag> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, geldBetrag struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true) {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // GELD
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.geld = iprot.readDouble();
              struct.setGeldIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TRANSAKTIONSNUMMER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.transaktionsnummer = iprot.readI32();
              struct.setTransaktionsnummerIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VERWENDUNGSZWECK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.verwendungszweck = iprot.readString();
              struct.setVerwendungszweckIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the
      // validate method
      if (!struct.isSetGeld()) {
        throw new org.apache.thrift.protocol.TProtocolException(
            "Required field 'geld' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, geldBetrag struct)
        throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(GELD_FIELD_DESC);
      oprot.writeDouble(struct.geld);
      oprot.writeFieldEnd();
      if (struct.isSetTransaktionsnummer()) {
        oprot.writeFieldBegin(TRANSAKTIONSNUMMER_FIELD_DESC);
        oprot.writeI32(struct.transaktionsnummer);
        oprot.writeFieldEnd();
      }
      if (struct.verwendungszweck != null) {
        if (struct.isSetVerwendungszweck()) {
          oprot.writeFieldBegin(VERWENDUNGSZWECK_FIELD_DESC);
          oprot.writeString(struct.verwendungszweck);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class geldBetragTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public geldBetragTupleScheme getScheme() {
      return new geldBetragTupleScheme();
    }
  }

  private static class geldBetragTupleScheme extends org.apache.thrift.scheme.TupleScheme<geldBetrag> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, geldBetrag struct)
        throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeDouble(struct.geld);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTransaktionsnummer()) {
        optionals.set(0);
      }
      if (struct.isSetVerwendungszweck()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetTransaktionsnummer()) {
        oprot.writeI32(struct.transaktionsnummer);
      }
      if (struct.isSetVerwendungszweck()) {
        oprot.writeString(struct.verwendungszweck);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, geldBetrag struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.geld = iprot.readDouble();
      struct.setGeldIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.transaktionsnummer = iprot.readI32();
        struct.setTransaktionsnummerIsSet(true);
      }
      if (incoming.get(1)) {
        struct.verwendungszweck = iprot.readString();
        struct.setVerwendungszweckIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
        : TUPLE_SCHEME_FACTORY).getScheme();
  }
}
