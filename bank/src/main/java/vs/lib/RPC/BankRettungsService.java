package vs.lib.RPC;

/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * 
 * @generated
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2023-06-13")
@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
public class BankRettungsService {

  public interface Iface {

    public double ausleihen(geldBetrag geld) throws org.apache.thrift.TException;

    public double ueberweisen(geldBetrag geld) throws org.apache.thrift.TException;

    public boolean stornieren(geldBetrag geld) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void ausleihen(geldBetrag geld, org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler)
        throws org.apache.thrift.TException;

    public void ueberweisen(geldBetrag geld,
        org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler)
        throws org.apache.thrift.TException;

    public void stornieren(geldBetrag geld,
        org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler)
        throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {
      }

      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }

      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot) {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    @Override
    public double ausleihen(geldBetrag geld) throws org.apache.thrift.TException {
      send_ausleihen(geld);
      return recv_ausleihen();
    }

    public void send_ausleihen(geldBetrag geld) throws org.apache.thrift.TException {
      ausleihen_args args = new ausleihen_args();
      args.setGeld(geld);
      sendBase("ausleihen", args);
    }

    public double recv_ausleihen() throws org.apache.thrift.TException {
      ausleihen_result result = new ausleihen_result();
      receiveBase(result, "ausleihen");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
          "ausleihen failed: unknown result");
    }

    @Override
    public double ueberweisen(geldBetrag geld) throws org.apache.thrift.TException {
      send_ueberweisen(geld);
      return recv_ueberweisen();
    }

    public void send_ueberweisen(geldBetrag geld) throws org.apache.thrift.TException {
      ueberweisen_args args = new ueberweisen_args();
      args.setGeld(geld);
      sendBase("ueberweisen", args);
    }

    public double recv_ueberweisen() throws org.apache.thrift.TException {
      ueberweisen_result result = new ueberweisen_result();
      receiveBase(result, "ueberweisen");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
          "ueberweisen failed: unknown result");
    }

    @Override
    public boolean stornieren(geldBetrag geld) throws org.apache.thrift.TException {
      send_stornieren(geld);
      return recv_stornieren();
    }

    public void send_stornieren(geldBetrag geld) throws org.apache.thrift.TException {
      stornieren_args args = new stornieren_args();
      args.setGeld(geld);
      sendBase("stornieren", args);
    }

    public boolean recv_stornieren() throws org.apache.thrift.TException {
      stornieren_result result = new stornieren_result();
      receiveBase(result, "stornieren");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
          "stornieren failed: unknown result");
    }

  }

  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager,
          org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }

      @Override
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory,
        org.apache.thrift.async.TAsyncClientManager clientManager,
        org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    @Override
    public void ausleihen(geldBetrag geld, org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      ausleihen_call method_call = new ausleihen_call(geld, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ausleihen_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Double> {
      private geldBetrag geld;

      public ausleihen_call(geldBetrag geld,
          org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler,
          org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.geld = geld;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(
            new org.apache.thrift.protocol.TMessage("ausleihen", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ausleihen_args args = new ausleihen_args();
        args.setGeld(geld);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.Double getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ausleihen();
      }
    }

    @Override
    public void ueberweisen(geldBetrag geld,
        org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      ueberweisen_call method_call = new ueberweisen_call(geld, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ueberweisen_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Double> {
      private geldBetrag geld;

      public ueberweisen_call(geldBetrag geld,
          org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler,
          org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.geld = geld;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(
            new org.apache.thrift.protocol.TMessage("ueberweisen", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ueberweisen_args args = new ueberweisen_args();
        args.setGeld(geld);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.Double getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ueberweisen();
      }
    }

    @Override
    public void stornieren(geldBetrag geld,
        org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler)
        throws org.apache.thrift.TException {
      checkReady();
      stornieren_call method_call = new stornieren_call(geld, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class stornieren_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private geldBetrag geld;

      public stornieren_call(geldBetrag geld,
          org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler,
          org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory,
          org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.geld = geld;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(
            new org.apache.thrift.protocol.TMessage("stornieren", org.apache.thrift.protocol.TMessageType.CALL, 0));
        stornieren_args args = new stornieren_args();
        args.setGeld(geld);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
            getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_stornieren();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I>
      implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());

    public Processor(I iface) {
      super(iface, getProcessMap(
          new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface,
        java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(
        java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      processMap.put("ausleihen", new ausleihen());
      processMap.put("ueberweisen", new ueberweisen());
      processMap.put("stornieren", new stornieren());
      return processMap;
    }

    public static class ausleihen<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ausleihen_args> {
      public ausleihen() {
        super("ausleihen");
      }

      @Override
      public ausleihen_args getEmptyArgsInstance() {
        return new ausleihen_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public ausleihen_result getResult(I iface, ausleihen_args args) throws org.apache.thrift.TException {
        ausleihen_result result = new ausleihen_result();
        result.success = iface.ausleihen(args.geld);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class ueberweisen<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ueberweisen_args> {
      public ueberweisen() {
        super("ueberweisen");
      }

      @Override
      public ueberweisen_args getEmptyArgsInstance() {
        return new ueberweisen_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public ueberweisen_result getResult(I iface, ueberweisen_args args) throws org.apache.thrift.TException {
        ueberweisen_result result = new ueberweisen_result();
        result.success = iface.ueberweisen(args.geld);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class stornieren<I extends Iface> extends org.apache.thrift.ProcessFunction<I, stornieren_args> {
      public stornieren() {
        super("stornieren");
      }

      @Override
      public stornieren_args getEmptyArgsInstance() {
        return new stornieren_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public stornieren_result getResult(I iface, stornieren_args args) throws org.apache.thrift.TException {
        stornieren_result result = new stornieren_result();
        result.success = iface.stornieren(args.geld);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());

    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(
          new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface,
        java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(
        java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("ausleihen", new ausleihen());
      processMap.put("ueberweisen", new ueberweisen());
      processMap.put("stornieren", new stornieren());
      return processMap;
    }

    public static class ausleihen<I extends AsyncIface>
        extends org.apache.thrift.AsyncProcessFunction<I, ausleihen_args, java.lang.Double> {
      public ausleihen() {
        super("ausleihen");
      }

      @Override
      public ausleihen_args getEmptyArgsInstance() {
        return new ausleihen_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> getResultHandler(
          final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Double>() {
          @Override
          public void onComplete(java.lang.Double o) {
            ausleihen_result result = new ausleihen_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }

          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ausleihen_result result = new ausleihen_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException) e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR,
                  e.getMessage());
            }
            try {
              fcall.sendResponse(fb, msg, msgType, seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, ausleihen_args args,
          org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler)
          throws org.apache.thrift.TException {
        iface.ausleihen(args.geld, resultHandler);
      }
    }

    public static class ueberweisen<I extends AsyncIface>
        extends org.apache.thrift.AsyncProcessFunction<I, ueberweisen_args, java.lang.Double> {
      public ueberweisen() {
        super("ueberweisen");
      }

      @Override
      public ueberweisen_args getEmptyArgsInstance() {
        return new ueberweisen_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> getResultHandler(
          final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Double>() {
          @Override
          public void onComplete(java.lang.Double o) {
            ueberweisen_result result = new ueberweisen_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }

          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ueberweisen_result result = new ueberweisen_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException) e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR,
                  e.getMessage());
            }
            try {
              fcall.sendResponse(fb, msg, msgType, seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, ueberweisen_args args,
          org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler)
          throws org.apache.thrift.TException {
        iface.ueberweisen(args.geld, resultHandler);
      }
    }

    public static class stornieren<I extends AsyncIface>
        extends org.apache.thrift.AsyncProcessFunction<I, stornieren_args, java.lang.Boolean> {
      public stornieren() {
        super("stornieren");
      }

      @Override
      public stornieren_args getEmptyArgsInstance() {
        return new stornieren_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(
          final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() {
          @Override
          public void onComplete(java.lang.Boolean o) {
            stornieren_result result = new stornieren_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }

          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            stornieren_result result = new stornieren_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException) e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR,
                  e.getMessage());
            }
            try {
              fcall.sendResponse(fb, msg, msgType, seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, stornieren_args args,
          org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler)
          throws org.apache.thrift.TException {
        iface.stornieren(args.geld, resultHandler);
      }
    }

  }

  @SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
  public static class ausleihen_args implements org.apache.thrift.TBase<ausleihen_args, ausleihen_args._Fields>,
      java.io.Serializable, Cloneable, Comparable<ausleihen_args> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "ausleihen_args");

    private static final org.apache.thrift.protocol.TField GELD_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "geld", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ausleihen_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ausleihen_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable geldBetrag geld; // required

    /**
     * The set of fields this struct contains, along with convenience methods for
     * finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GELD((short) 1, "geld");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // GELD
            return GELD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.GELD, new org.apache.thrift.meta_data.FieldMetaData("geld",
          org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, geldBetrag.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ausleihen_args.class, metaDataMap);
    }

    public ausleihen_args() {
    }

    public ausleihen_args(
        geldBetrag geld) {
      this();
      this.geld = geld;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ausleihen_args(ausleihen_args other) {
      if (other.isSetGeld()) {
        this.geld = new geldBetrag(other.geld);
      }
    }

    @Override
    public ausleihen_args deepCopy() {
      return new ausleihen_args(this);
    }

    @Override
    public void clear() {
      this.geld = null;
    }

    @org.apache.thrift.annotation.Nullable
    public geldBetrag getGeld() {
      return this.geld;
    }

    public ausleihen_args setGeld(@org.apache.thrift.annotation.Nullable geldBetrag geld) {
      this.geld = geld;
      return this;
    }

    public void unsetGeld() {
      this.geld = null;
    }

    /**
     * Returns true if field geld is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSetGeld() {
      return this.geld != null;
    }

    public void setGeldIsSet(boolean value) {
      if (!value) {
        this.geld = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
        case GELD:
          if (value == null) {
            unsetGeld();
          } else {
            setGeld((geldBetrag) value);
          }
          break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case GELD:
          return getGeld();

      }
      throw new java.lang.IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a
     * value) and false otherwise
     */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case GELD:
          return isSetGeld();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof ausleihen_args)
        return this.equals((ausleihen_args) that);
      return false;
    }

    public boolean equals(ausleihen_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_geld = true && this.isSetGeld();
      boolean that_present_geld = true && that.isSetGeld();
      if (this_present_geld || that_present_geld) {
        if (!(this_present_geld && that_present_geld))
          return false;
        if (!this.geld.equals(that.geld))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetGeld()) ? 131071 : 524287);
      if (isSetGeld())
        hashCode = hashCode * 8191 + geld.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ausleihen_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetGeld(), other.isSetGeld());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGeld()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.geld, other.geld);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ausleihen_args(");
      boolean first = true;

      sb.append("geld:");
      if (this.geld == null) {
        sb.append("null");
      } else {
        sb.append(this.geld);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (geld != null) {
        geld.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ausleihen_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public ausleihen_argsStandardScheme getScheme() {
        return new ausleihen_argsStandardScheme();
      }
    }

    private static class ausleihen_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ausleihen_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, ausleihen_args struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // GELD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.geld = new geldBetrag();
                struct.geld.read(iprot);
                struct.setGeldIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the
        // validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, ausleihen_args struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.geld != null) {
          oprot.writeFieldBegin(GELD_FIELD_DESC);
          struct.geld.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ausleihen_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public ausleihen_argsTupleScheme getScheme() {
        return new ausleihen_argsTupleScheme();
      }
    }

    private static class ausleihen_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ausleihen_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ausleihen_args struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetGeld()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetGeld()) {
          struct.geld.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ausleihen_args struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.geld = new geldBetrag();
          struct.geld.read(iprot);
          struct.setGeldIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
          : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
  public static class ausleihen_result implements org.apache.thrift.TBase<ausleihen_result, ausleihen_result._Fields>,
      java.io.Serializable, Cloneable, Comparable<ausleihen_result> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "ausleihen_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "success", org.apache.thrift.protocol.TType.DOUBLE, (short) 0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ausleihen_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ausleihen_resultTupleSchemeFactory();

    public double success; // required

    /**
     * The set of fields this struct contains, along with convenience methods for
     * finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ausleihen_result.class, metaDataMap);
    }

    public ausleihen_result() {
    }

    public ausleihen_result(
        double success) {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ausleihen_result(ausleihen_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    @Override
    public ausleihen_result deepCopy() {
      return new ausleihen_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0.0;
    }

    public double getSuccess() {
      return this.success;
    }

    public ausleihen_result setSuccess(double success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /**
     * Returns true if field success is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((java.lang.Double) value);
          }
          break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a
     * value) and false otherwise
     */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof ausleihen_result)
        return this.equals((ausleihen_result) that);
      return false;
    }

    public boolean equals(ausleihen_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(success);

      return hashCode;
    }

    @Override
    public int compareTo(ausleihen_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ausleihen_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is
        // wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ausleihen_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public ausleihen_resultStandardScheme getScheme() {
        return new ausleihen_resultStandardScheme();
      }
    }

    private static class ausleihen_resultStandardScheme
        extends org.apache.thrift.scheme.StandardScheme<ausleihen_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, ausleihen_result struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.success = iprot.readDouble();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the
        // validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, ausleihen_result struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeDouble(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ausleihen_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public ausleihen_resultTupleScheme getScheme() {
        return new ausleihen_resultTupleScheme();
      }
    }

    private static class ausleihen_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ausleihen_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ausleihen_result struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeDouble(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ausleihen_result struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readDouble();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
          : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
  public static class ueberweisen_args implements org.apache.thrift.TBase<ueberweisen_args, ueberweisen_args._Fields>,
      java.io.Serializable, Cloneable, Comparable<ueberweisen_args> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "ueberweisen_args");

    private static final org.apache.thrift.protocol.TField GELD_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "geld", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ueberweisen_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ueberweisen_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable geldBetrag geld; // required

    /**
     * The set of fields this struct contains, along with convenience methods for
     * finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GELD((short) 1, "geld");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // GELD
            return GELD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.GELD, new org.apache.thrift.meta_data.FieldMetaData("geld",
          org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, geldBetrag.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ueberweisen_args.class, metaDataMap);
    }

    public ueberweisen_args() {
    }

    public ueberweisen_args(
        geldBetrag geld) {
      this();
      this.geld = geld;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ueberweisen_args(ueberweisen_args other) {
      if (other.isSetGeld()) {
        this.geld = new geldBetrag(other.geld);
      }
    }

    @Override
    public ueberweisen_args deepCopy() {
      return new ueberweisen_args(this);
    }

    @Override
    public void clear() {
      this.geld = null;
    }

    @org.apache.thrift.annotation.Nullable
    public geldBetrag getGeld() {
      return this.geld;
    }

    public ueberweisen_args setGeld(@org.apache.thrift.annotation.Nullable geldBetrag geld) {
      this.geld = geld;
      return this;
    }

    public void unsetGeld() {
      this.geld = null;
    }

    /**
     * Returns true if field geld is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSetGeld() {
      return this.geld != null;
    }

    public void setGeldIsSet(boolean value) {
      if (!value) {
        this.geld = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
        case GELD:
          if (value == null) {
            unsetGeld();
          } else {
            setGeld((geldBetrag) value);
          }
          break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case GELD:
          return getGeld();

      }
      throw new java.lang.IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a
     * value) and false otherwise
     */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case GELD:
          return isSetGeld();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof ueberweisen_args)
        return this.equals((ueberweisen_args) that);
      return false;
    }

    public boolean equals(ueberweisen_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_geld = true && this.isSetGeld();
      boolean that_present_geld = true && that.isSetGeld();
      if (this_present_geld || that_present_geld) {
        if (!(this_present_geld && that_present_geld))
          return false;
        if (!this.geld.equals(that.geld))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetGeld()) ? 131071 : 524287);
      if (isSetGeld())
        hashCode = hashCode * 8191 + geld.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ueberweisen_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetGeld(), other.isSetGeld());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGeld()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.geld, other.geld);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ueberweisen_args(");
      boolean first = true;

      sb.append("geld:");
      if (this.geld == null) {
        sb.append("null");
      } else {
        sb.append(this.geld);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (geld != null) {
        geld.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ueberweisen_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public ueberweisen_argsStandardScheme getScheme() {
        return new ueberweisen_argsStandardScheme();
      }
    }

    private static class ueberweisen_argsStandardScheme
        extends org.apache.thrift.scheme.StandardScheme<ueberweisen_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, ueberweisen_args struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // GELD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.geld = new geldBetrag();
                struct.geld.read(iprot);
                struct.setGeldIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the
        // validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, ueberweisen_args struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.geld != null) {
          oprot.writeFieldBegin(GELD_FIELD_DESC);
          struct.geld.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ueberweisen_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public ueberweisen_argsTupleScheme getScheme() {
        return new ueberweisen_argsTupleScheme();
      }
    }

    private static class ueberweisen_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ueberweisen_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ueberweisen_args struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetGeld()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetGeld()) {
          struct.geld.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ueberweisen_args struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.geld = new geldBetrag();
          struct.geld.read(iprot);
          struct.setGeldIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
          : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
  public static class ueberweisen_result
      implements org.apache.thrift.TBase<ueberweisen_result, ueberweisen_result._Fields>, java.io.Serializable,
      Cloneable, Comparable<ueberweisen_result> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "ueberweisen_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "success", org.apache.thrift.protocol.TType.DOUBLE, (short) 0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ueberweisen_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ueberweisen_resultTupleSchemeFactory();

    public double success; // required

    /**
     * The set of fields this struct contains, along with convenience methods for
     * finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ueberweisen_result.class, metaDataMap);
    }

    public ueberweisen_result() {
    }

    public ueberweisen_result(
        double success) {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ueberweisen_result(ueberweisen_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    @Override
    public ueberweisen_result deepCopy() {
      return new ueberweisen_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0.0;
    }

    public double getSuccess() {
      return this.success;
    }

    public ueberweisen_result setSuccess(double success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /**
     * Returns true if field success is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((java.lang.Double) value);
          }
          break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a
     * value) and false otherwise
     */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof ueberweisen_result)
        return this.equals((ueberweisen_result) that);
      return false;
    }

    public boolean equals(ueberweisen_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(success);

      return hashCode;
    }

    @Override
    public int compareTo(ueberweisen_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ueberweisen_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is
        // wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ueberweisen_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public ueberweisen_resultStandardScheme getScheme() {
        return new ueberweisen_resultStandardScheme();
      }
    }

    private static class ueberweisen_resultStandardScheme
        extends org.apache.thrift.scheme.StandardScheme<ueberweisen_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, ueberweisen_result struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.success = iprot.readDouble();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the
        // validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, ueberweisen_result struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeDouble(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ueberweisen_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public ueberweisen_resultTupleScheme getScheme() {
        return new ueberweisen_resultTupleScheme();
      }
    }

    private static class ueberweisen_resultTupleScheme
        extends org.apache.thrift.scheme.TupleScheme<ueberweisen_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ueberweisen_result struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeDouble(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ueberweisen_result struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readDouble();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
          : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
  public static class stornieren_args implements org.apache.thrift.TBase<stornieren_args, stornieren_args._Fields>,
      java.io.Serializable, Cloneable, Comparable<stornieren_args> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "stornieren_args");

    private static final org.apache.thrift.protocol.TField GELD_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "geld", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new stornieren_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new stornieren_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable geldBetrag geld; // required

    /**
     * The set of fields this struct contains, along with convenience methods for
     * finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GELD((short) 1, "geld");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 1: // GELD
            return GELD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.GELD, new org.apache.thrift.meta_data.FieldMetaData("geld",
          org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, geldBetrag.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stornieren_args.class, metaDataMap);
    }

    public stornieren_args() {
    }

    public stornieren_args(
        geldBetrag geld) {
      this();
      this.geld = geld;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stornieren_args(stornieren_args other) {
      if (other.isSetGeld()) {
        this.geld = new geldBetrag(other.geld);
      }
    }

    @Override
    public stornieren_args deepCopy() {
      return new stornieren_args(this);
    }

    @Override
    public void clear() {
      this.geld = null;
    }

    @org.apache.thrift.annotation.Nullable
    public geldBetrag getGeld() {
      return this.geld;
    }

    public stornieren_args setGeld(@org.apache.thrift.annotation.Nullable geldBetrag geld) {
      this.geld = geld;
      return this;
    }

    public void unsetGeld() {
      this.geld = null;
    }

    /**
     * Returns true if field geld is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSetGeld() {
      return this.geld != null;
    }

    public void setGeldIsSet(boolean value) {
      if (!value) {
        this.geld = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
        case GELD:
          if (value == null) {
            unsetGeld();
          } else {
            setGeld((geldBetrag) value);
          }
          break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case GELD:
          return getGeld();

      }
      throw new java.lang.IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a
     * value) and false otherwise
     */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case GELD:
          return isSetGeld();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof stornieren_args)
        return this.equals((stornieren_args) that);
      return false;
    }

    public boolean equals(stornieren_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_geld = true && this.isSetGeld();
      boolean that_present_geld = true && that.isSetGeld();
      if (this_present_geld || that_present_geld) {
        if (!(this_present_geld && that_present_geld))
          return false;
        if (!this.geld.equals(that.geld))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetGeld()) ? 131071 : 524287);
      if (isSetGeld())
        hashCode = hashCode * 8191 + geld.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(stornieren_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetGeld(), other.isSetGeld());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGeld()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.geld, other.geld);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("stornieren_args(");
      boolean first = true;

      sb.append("geld:");
      if (this.geld == null) {
        sb.append("null");
      } else {
        sb.append(this.geld);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (geld != null) {
        geld.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stornieren_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public stornieren_argsStandardScheme getScheme() {
        return new stornieren_argsStandardScheme();
      }
    }

    private static class stornieren_argsStandardScheme
        extends org.apache.thrift.scheme.StandardScheme<stornieren_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, stornieren_args struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // GELD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.geld = new geldBetrag();
                struct.geld.read(iprot);
                struct.setGeldIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the
        // validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, stornieren_args struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.geld != null) {
          oprot.writeFieldBegin(GELD_FIELD_DESC);
          struct.geld.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stornieren_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public stornieren_argsTupleScheme getScheme() {
        return new stornieren_argsTupleScheme();
      }
    }

    private static class stornieren_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<stornieren_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stornieren_args struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetGeld()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetGeld()) {
          struct.geld.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stornieren_args struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.geld = new geldBetrag();
          struct.geld.read(iprot);
          struct.setGeldIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
          : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
  public static class stornieren_result
      implements org.apache.thrift.TBase<stornieren_result, stornieren_result._Fields>, java.io.Serializable, Cloneable,
      Comparable<stornieren_result> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "stornieren_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "success", org.apache.thrift.protocol.TType.BOOL, (short) 0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new stornieren_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new stornieren_resultTupleSchemeFactory();

    public boolean success; // required

    /**
     * The set of fields this struct contains, along with convenience methods for
     * finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short) 0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch (fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null)
          throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
          _Fields.class);
      tmpMap.put(_Fields.SUCCESS,
          new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stornieren_result.class, metaDataMap);
    }

    public stornieren_result() {
    }

    public stornieren_result(
        boolean success) {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stornieren_result(stornieren_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    @Override
    public stornieren_result deepCopy() {
      return new stornieren_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public stornieren_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /**
     * Returns true if field success is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((java.lang.Boolean) value);
          }
          break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a
     * value) and false otherwise
     */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof stornieren_result)
        return this.equals((stornieren_result) that);
      return false;
    }

    public boolean equals(stornieren_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(stornieren_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("stornieren_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is
        // wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stornieren_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public stornieren_resultStandardScheme getScheme() {
        return new stornieren_resultStandardScheme();
      }
    }

    private static class stornieren_resultStandardScheme
        extends org.apache.thrift.scheme.StandardScheme<stornieren_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, stornieren_result struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true) {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the
        // validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, stornieren_result struct)
          throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stornieren_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public stornieren_resultTupleScheme getScheme() {
        return new stornieren_resultTupleScheme();
      }
    }

    private static class stornieren_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<stornieren_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stornieren_result struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stornieren_result struct)
          throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
          : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
